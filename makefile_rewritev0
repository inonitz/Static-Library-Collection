COMPILER_BASE_FOLDER = "$(shell printenv COMPILER_BASE_FOLDER)"
PROJECT_FOLDER_BASE  = $(shell pwd)
PROJECT_FOLDER       = "$(shell cygpath -m $(PROJECT_FOLDER_BASE))"


LIB_FILES     =
LIB_INC_PATHS =
LIB_PATHS     =
LINKER   = $(COMPILER_BASE_FOLDER)/bin/lld.exe
CPPC  	 = $(COMPILER_BASE_FOLDER)/bin/clang++.exe
CC  	 = $(COMPILER_BASE_FOLDER)/bin/clang.exe
ASMC 	 = $(COMPILER_BASE_FOLDER)/bin/llvm-as.exe
ARCHIVE  = $(COMPILER_BASE_FOLDER)/bin/llvm-ar.exe


PROJNAME = lib_static_stbi
BUILDDIR_BASE 	   :=build
APPEND_RELEASE_DIR :=release
APPEND_DEBUG_DIR   :=debug
APPEND_DIR_CHOSEN  :=
BUILDDIR  :=$(BUILDDIR_BASE)/
OBJDIR    :=
OUTPUTDIR :=
DEBUG     :=
CVERSION   = c11
CXXVERSION = c++17
ASMFLAGS = -O0
CXXFLAGS =  -c \
			-pedantic \
			-Werror \
			-Wall \
			-Wextra \
			-march=native \
			-mtune=native
RELEASE_BUILD_FLAGS :=-O3 -ffast-math
DEBUG_BUILD_FLAGS   :=-g -Os -D_DEBUG
LDFLAGS = \
		$(LIB_FILES) \
		-lm \
		-static-libc \
 		-static-libstdc++
ARFLAGS = \
	rcs \


rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))
CSRC   = $(call rwildcard,$(SRCDIR),*.c)
CPPSRC = $(call rwildcard,$(SRCDIR),*.cpp)
ASMSRC = $(call rwildcard,$(SRCDIR),*.asm)


# Compile All C, C++, ASM Files that are part of the source directory
$(OBJDIR)/%_asm.o: $(SRCDIR)/%.asm
	@ echo compiling ASM File $^ ...
	@ mkdir -p $(@D)
	$(ASMC) $(ASMFLAGS) $^ -o $@

$(OBJDIR)/%_c.o: $(SRCDIR)/%.c
	@ echo compiling C File $^ ...
	@ mkdir -p $(@D)
	$(CC) -std=$(CVERSION) $(CXXFLAGS) $(LIB_INC_PATHS) $^ -o $@

$(OBJDIR)/%_cpp.o: $(SRCDIR)/%.cpp
	@ echo compiling CPP File $^ ...
	@ mkdir -p $(@D)
	$(CPPC) -std=$(CXXVERSION) $(CXXFLAGS) $(LIB_INC_PATHS) $^ -o $@

OBJS  = $(patsubst $(SRCDIR)/%.asm,$(OBJDIR)/%_asm.o,$(ASMSRC))
OBJS += $(patsubst $(SRCDIR)/%.c,$(OBJDIR)/%_c.o,$(CSRC))
OBJS += $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%_cpp.o,$(CPPSRC))


setup:
	mkdir -p assets
	mkdir -p src
	mkdir -p build
	mkdir -p build/debug
	mkdir -p build/debug/bin
	mkdir -p build/debug/obj
	mkdir -p build/release
	mkdir -p build/release/bin
	mkdir -p build/release/obj


rundbg: BUILDDIR  :=$(BUILDDIR_BASE)/$(APPEND_DEBUG_DIR)
rundbg: OUTPUTDIR :=$(BUILDDIR)/bin
rundbg: 
	@ echo Running Compiled Executable ...
	-@ ./$(OUTPUTDIR)/$(TARGET)

runrel: BUILDDIR  :=$(BUILDDIR_BASE)/$(APPEND_RELEASE_DIR)
runrel: OUTPUTDIR :=$(BUILDDIR)/bin
runrel: 
	@ echo Running Compiled Executable ...
	-@ ./$(OUTPUTDIR)/$(TARGET)


cleandbg: BUILDDIR  :=$(BUILDDIR_BASE)/$(APPEND_DEBUG_DIR)
cleandbg: OBJDIR    :=$(BUILDDIR)/obj
cleandbg: OUTPUTDIR :=$(BUILDDIR)/bin
cleandbg: clean
cleanrel: BUILDDIR  :=$(BUILDDIR_BASE)/$(APPEND_RELEASE_DIR)
cleanrel: OBJDIR    :=$(BUILDDIR)/obj
cleanrel: OUTPUTDIR :=$(BUILDDIR)/bin
cleanrel: clean


debug: BUILDDIR  :=$(BUILDDIR_BASE)/$(APPEND_DEBUG_DIR)
debug: OBJDIR    :=$(BUILDDIR)/obj
debug: OUTPUTDIR :=$(BUILDDIR)/bin
debug: CXXFLAGS  +=$(DEBUG_BUILD_FLAGS)
debug: $(OBJS) make_target

rel: BUILDDIR  :=$(BUILDDIR_BASE)/$(APPEND_RELEASE_DIR)
rel: OBJDIR    :=$(BUILDDIR)/obj
rel: OUTPUTDIR :=$(BUILDDIR)/bin
rel: CXXFLAGS  +=$(RELEASE_BUILD_FLAGS)
rel: make_target


make_target: MAKEFLAGS += -j$(shell grep -c ^processor /proc/cpuinfo)
make_target: archive_lib


.SECONDEXPANSION:

archive_lib: $(OBJS)
	@ echo Creating Static Library ...
	@ echo -e "File List: $(ASMSRC) $(CSRC) $(CPPSRC)\nObject List: $(OBJS)\n"
	$(ARCHIVE) $(ARFLAGS) $(OUTPUTDIR)/$(TARGET) $(OBJS)


clean:
	@ echo -n "Deleting Object Files & Project Executable ... ";
	-@ rm -r $(OBJDIR)/* &> /dev/null || true
	-@ rm -r $(OUTPUTDIR)/$(TARGET) &> /dev/null || true
	@ echo "Done! ";


.PHONY: setup clean_internal cleanbin_internal